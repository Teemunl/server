<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Server</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../css/style.css">
    
</head>
<body>
    <div class="d-flex" id="wrapper">
        <!-- Sidebar -->
        <div class="bg-light border-end" id="sidebar-wrapper">
            <div class="sidebar-heading d-flex justify-content-between align-items-center">
                <span>
                    <i class="bi bi-cloud-fill me-2"></i>File Server
                </span>
                <button class="btn btn-sm btn-outline-secondary" id="sidebarToggle">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="list-group list-group-flush">
                <a href="#" class="list-group-item list-group-item-action active" onclick="loadDirectory('')">
                    <i class="bi bi-house-fill me-2"></i>Root
                </a>
                <div id="sidebar-folders">
                    <!-- Folders will be loaded here -->
                </div>
            </div>
        </div>

        <!-- Page Content -->
        <div id="page-content-wrapper">
            <!-- Sidebar Toggle Button -->
            <div class="sidebar-toggle-container">
                <button class="btn btn-primary" id="sidebarToggleBtn">
                    <i class="bi bi-list"></i>
                </button>
            </div>

            <div class="content-container">
                <!-- Breadcrumb Navigation -->
                <nav aria-label="breadcrumb" class="mb-4">
                    <ol class="breadcrumb" id="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="#" onclick="navigateToPath('')" class="text-decoration-none">
                                <i class="bi bi-house-fill me-1"></i>Root
                            </a>
                        </li>
                    </ol>
                </nav>

                <!-- Upload Form -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-cloud-upload me-2"></i>Upload Files
                            <span id="upload-location" class="text-muted ms-2">(Root Directory)</span>
                        </h5>
                    </div>
                    <div class="card-body">
                        <form action="/upload" method="post" enctype="multipart/form-data" class="mb-0" onsubmit="handleUpload(event)">
                            <input type="hidden" name="folder" id="current-folder" value="">
                            <div class="input-group">
                                <input type="file" class="form-control" name="file" multiple required>
                                <button class="btn btn-primary" type="submit">
                                    <i class="bi bi-cloud-upload"></i> Upload
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Folder and File List -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-files me-2"></i>Folders & Files
                            <span id="current-path-display" class="text-muted ms-2">(Root)</span>
                        </h5>
                        <div id="folder-actions" style="display: none;">
                            <!-- Buttons will be dynamically generated here -->
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="file-list">
                            <!-- Files will be loaded here dynamically -->
                                            </div>
                                            </div>
                                        </div>
                                            </div>
                                            </div>
                                        </div>

    <!-- Create Folder Modal -->
    <div class="modal fade" id="createFolderModal" tabindex="-1" aria-labelledby="createFolderModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createFolderModalLabel">
                        <i class="bi bi-folder-plus me-2"></i>Create New Folder
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="createFolderForm" onsubmit="handleCreateFolder(event)">
                        <div class="mb-3">
                            <label for="folderName" class="form-label">Folder Name</label>
                            <input type="text" class="form-control" id="folderName" name="name" placeholder="Enter folder name..." required>
                            </div>
                    </form>
                    </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" form="createFolderForm" class="btn btn-success">
                        <i class="bi bi-folder-plus"></i> Create Folder
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentPath = '';
        let pathHistory = [''];

        window.addEventListener('DOMContentLoaded', event => {
            // Load root directory on page load
            loadDirectory('');
            
            // Add smooth hover effects to list items
            addHoverEffects();
            
            // Setup sidebar toggle
            setupSidebarToggle();
            
            // Load sidebar folders
            loadSidebarFolders();
        });

        function setupSidebarToggle() {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebarToggleBtn = document.getElementById('sidebarToggleBtn');
            
                sidebarToggle.addEventListener('click', event => {
                    event.preventDefault();
                    document.body.classList.toggle('sb-sidenav-toggled');
                });
            
            sidebarToggleBtn.addEventListener('click', event => {
                event.preventDefault();
                document.body.classList.toggle('sb-sidenav-toggled');
            });
        }

        function loadSidebarFolders() {
            // Load root directory for sidebar
            fetch('/api/folder?path=')
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        console.error('Error loading sidebar folders:', data.error);
                        return;
                    }
                    displaySidebarFolders(data.items);
                })
                .catch(error => {
                    console.error('Error loading sidebar folders:', error);
                });
        }

        function displaySidebarFolders(items) {
            const sidebarFolders = document.getElementById('sidebar-folders');
            
            if (!items || items.length === 0) {
                return;
            }

            // Filter only directories and sort them
            const folders = items
                .filter(item => item.isDirectory)
                .sort((a, b) => a.name.localeCompare(b.name));

            let html = '';
            folders.forEach(folder => {
                html += `
                    <a href="#" class="list-group-item list-group-item-action sidebar-folder" 
                       onclick="loadDirectory('${folder.name}');">
                        <i class="bi bi-folder me-2"></i>${folder.name}
                    </a>
                `;
            });
            
            sidebarFolders.innerHTML = html;
        }

        function closeSidebar() {
            document.body.classList.remove('sb-sidenav-toggled');
        }

        function loadDirectory(path) {
            currentPath = path;
            updateBreadcrumb(path);
            updateUploadLocation(path);
            updateCurrentPathDisplay(path);
            updateFolderActions(path);
            
            // Show loading state
            document.getElementById('file-list').innerHTML = `
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading directory...</p>
                </div>
            `;

            // Fetch directory contents
            fetch(`/api/folder?path=${encodeURIComponent(path)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        showError(data.error);
                    } else {
                        displayFiles(data.items, path);
                    }
                })
                .catch(error => {
                    console.error('Error loading directory:', error);
                    showError('Failed to load directory');
                });
        }

        function displayFiles(items, path) {
            const fileList = document.getElementById('file-list');
            
            if (!items || items.length === 0) {
                fileList.innerHTML = `
                    <div class="text-center py-5">
                        <i class="bi bi-folder2-open display-1 text-muted"></i>
                        <p class="text-muted mt-3 mb-0 fs-5">No files or folders available.</p>
                        <p class="text-muted">Upload a file or create a folder to get started.</p>
                    </div>
                `;
                return;
            }

            let html = '<div class="list-group">';
            
            // Sort: folders first, then files
            const sortedItems = items.sort((a, b) => {
                if (a.isDirectory && !b.isDirectory) return -1;
                if (!a.isDirectory && b.isDirectory) return 1;
                return a.name.localeCompare(b.name);
            });

            sortedItems.forEach(item => {
                if (item.isDirectory) {
                    html += `
                        <div class="list-group-item d-flex justify-content-between align-items-center folder-item" 
                             onclick="openFolder('${item.name}')" style="cursor: pointer;">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-folder-fill fs-5 text-success"></i>
                                <span class="ms-3 fw-semibold">${item.name}</span>
                                <span class="badge bg-secondary ms-2">Folder</span>
                            </div>
                            <div class="btn-group" onclick="event.stopPropagation()">
                                <button class="btn btn-sm btn-primary" onclick="downloadFolder('${item.name}')">
                                    <i class="bi bi-download"></i> Download
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteItem('${item.name}', true)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    `;
                } else {
                    html += `
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-file-earmark fs-5 text-primary"></i>
                                <span class="ms-3">${item.name}</span>
                            </div>
                            <div class="btn-group">
                                <a href="/download/${encodeURIComponent(path ? path + '/' + item.name : item.name)}" 
                                   class="btn btn-sm btn-primary">
                                    <i class="bi bi-download"></i> Download
                                </a>
                                <button class="btn btn-sm btn-danger" onclick="deleteItem('${path ? path + '/' + item.name : item.name}', false)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    `;
                }
            });
            
            html += '</div>';
            fileList.innerHTML = html;
            addHoverEffects();
        }

        function openFolder(folderName) {
            const newPath = currentPath ? `${currentPath}/${folderName}` : folderName;
            pathHistory.push(newPath);
            loadDirectory(newPath);
        }

        function navigateToPath(path) {
            // Find the index of the path in history
            const pathIndex = pathHistory.indexOf(path);
            if (pathIndex !== -1) {
                // Remove all paths after the target path
                pathHistory = pathHistory.slice(0, pathIndex + 1);
                loadDirectory(path);
            }
        }

        function updateBreadcrumb(path) {
            const breadcrumb = document.getElementById('breadcrumb');
            breadcrumb.innerHTML = '<li class="breadcrumb-item"><a href="#" onclick="navigateToPath(\'\')" class="text-decoration-none"><i class="bi bi-house-fill me-1"></i>Root</a></li>';
            
            if (path) {
                const pathParts = path.split('/');
                let currentPathPart = '';
                
                pathParts.forEach((part, index) => {
                    currentPathPart = currentPathPart ? `${currentPathPart}/${part}` : part;
                    breadcrumb.innerHTML += `
                        <li class="breadcrumb-item">
                            <a href="#" onclick="navigateToPath('${currentPathPart}')" class="text-decoration-none">
                                ${part}
                            </a>
                        </li>
                    `;
                });
            }
        }

        function updateUploadLocation(path) {
            const uploadLocation = document.getElementById('upload-location');
            const currentFolderInput = document.getElementById('current-folder');
            
            if (path) {
                uploadLocation.textContent = `(${path})`;
                currentFolderInput.value = path;
            } else {
                uploadLocation.textContent = '(Root Directory)';
                currentFolderInput.value = '';
            }
        }

        function updateCurrentPathDisplay(path) {
            const currentPathDisplay = document.getElementById('current-path-display');
            currentPathDisplay.textContent = path ? `(${path})` : '(Root)';
        }

        function updateFolderActions(path) {
            const folderActions = document.getElementById('folder-actions');
            if (path) {
                // Inside a folder - only show download button
                folderActions.innerHTML = `
                    <button class="btn btn-sm btn-primary" onclick="downloadCurrentFolder()">
                        <i class="bi bi-download"></i> Download Folder
                    </button>
                `;
                folderActions.style.display = 'block';
            } else {
                // Root directory - show create folder button
                folderActions.innerHTML = `
                    <button class="btn btn-sm btn-success" onclick="showCreateFolderModal()">
                        <i class="bi bi-folder-plus"></i> Create Folder
                    </button>
                `;
                folderActions.style.display = 'block';
            }
        }

        function downloadCurrentFolder() {
            if (currentPath) {
                window.location.href = `/download-folder/${encodeURIComponent(currentPath)}`;
            }
        }

        function downloadFolder(folderName) {
            const folderPath = currentPath ? `${currentPath}/${folderName}` : folderName;
            window.location.href = `/download-folder/${encodeURIComponent(folderPath)}`;
        }

        function deleteItem(target, isFolder) {
            const itemType = isFolder ? 'folder' : 'file';
            const confirmMessage = `Are you sure you want to delete this ${itemType}?`;
            
            if (confirm(confirmMessage)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/delete';
                
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'target';
                input.value = target;
                
                form.appendChild(input);
                document.body.appendChild(form);
                form.submit();
            }
        }

        function showCreateFolderModal() {
            const modal = new bootstrap.Modal(document.getElementById('createFolderModal'));
            modal.show();
        }

        function handleCreateFolder(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            
            fetch('/folder', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    // Reload current directory to show new folder
                    loadDirectory(currentPath);
                    // Reload sidebar folders
                    loadSidebarFolders();
                    // Close the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createFolderModal'));
                    modal.hide();
                    // Reset form
                    form.reset();
                } else {
                    alert('Failed to create folder');
                }
            })
            .catch(error => {
                console.error('Error creating folder:', error);
                alert('Failed to create folder');
            });
        }

        function handleUpload(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const fileInput = form.querySelector('input[type="file"]');
            const files = fileInput.files;
            
            if (files.length === 0) {
                alert('Please select at least one file to upload.');
                return;
            }
            
            // Upload each file individually
            let uploadPromises = [];
            let successCount = 0;
            let errorCount = 0;
            
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const individualFormData = new FormData();
                individualFormData.append('file', file);
                individualFormData.append('folder', document.getElementById('current-folder').value);
                
                const uploadPromise = fetch('/upload', {
                    method: 'POST',
                    body: individualFormData
                })
                .then(response => {
                    if (response.ok) {
                        successCount++;
                    } else {
                        errorCount++;
                        console.error(`Failed to upload ${file.name}`);
                    }
                })
                .catch(error => {
                    errorCount++;
                    console.error(`Error uploading ${file.name}:`, error);
                });
                
                uploadPromises.push(uploadPromise);
            }
            
            // Wait for all uploads to complete
            Promise.all(uploadPromises).then(() => {
                // Reload current directory to show new files
                loadDirectory(currentPath);
                
                // Show upload summary
                let message = `Upload complete! `;
                if (successCount > 0) {
                    message += `${successCount} file(s) uploaded successfully. `;
                }
                if (errorCount > 0) {
                    message += `${errorCount} file(s) failed to upload.`;
                }
                
                if (errorCount === 0) {
                    alert(message);
                } else {
                    alert(message);
                }
                
                // Reset form
                form.reset();
            });
        }

        function showError(message) {
            document.getElementById('file-list').innerHTML = `
                <div class="text-center py-5">
                    <i class="bi bi-exclamation-triangle display-1 text-danger"></i>
                    <p class="text-danger mt-3 mb-0 fs-5">Error</p>
                    <p class="text-muted">${message}</p>
                    <button class="btn btn-primary" onclick="loadDirectory(currentPath)">Retry</button>
                </div>
            `;
        }

        function addHoverEffects() {
            const listItems = document.querySelectorAll('.list-group-item');
            listItems.forEach(item => {
                item.addEventListener('mouseenter', function() {
                    if (this.classList.contains('folder-item')) {
                        this.style.transform = 'translateX(8px) scale(1.02)';
                    } else {
                        this.style.transform = 'translateX(8px)';
                    }
                });
                
                item.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateX(0) scale(1)';
                });
            });
        }
    </script>
</body>
</html>
